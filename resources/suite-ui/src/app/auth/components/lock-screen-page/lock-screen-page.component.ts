import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { NavigationService } from '../../../common/services/navigation.service';
import { NotificationService } from '../../../common/services/notification.service';
import { HttpErrorResponse } from '@angular/common/http';
import { LanguageService } from '../../../i18n/services/language.service';
import { Router } from '@angular/router';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import {environment} from '../../../../environments/environment';

/**
 * Represents the Page where the user is taken to after its session has expired. In this page is displayed a lock screen
 * where the user can re-enter her password and get back its session or decide to login as a different user.
 */
@Component({
  selector: 'app-lock-screen-page',
  templateUrl: './lock-screen-page.component.html',
  styleUrls: ['./lock-screen-page.component.sass']
})
export class LockScreenPageComponent {
  public password: string;
  public isAuthenticating: boolean;

  public lockScreenForm: FormGroup = this.toFormGroup();

  public companyName: string = '';

  constructor(
    public authService: AuthService,
    private navigationService: NavigationService,
    private notificationService: NotificationService,
    private languageService: LanguageService,
    private formBuilder: FormBuilder
  ) {
    // if (environment.company_name) {
    //   this.companyName = environment.company_name;
    // }
  }

  /**
   * Handles the submission of the Form in the Lock screen page, and attempts to reset the current token, so the user
   * can continue using the application without the need of a re-authentication.
   *
   * @param {Event} event: The event generated by the form when submitted.
   */
  login(form: FormGroup): void {
    const { value } = form;
    this.isAuthenticating = true;
    this.authService.reset(value.password).subscribe(
      () => {
        this.navigationService.goTo('/');
      },
      (error: HttpErrorResponse) => {
        this.isAuthenticating = false;
        const message =
          error.status === 401
            ? 'lock-screen.invalid-password'
            : 'login-form.authentication-error';
        this.notificationService.showError(
          this.languageService.translate(message)
        );
      }
    );
  }

  /**
   * Logs the user out.
   */
  logout(): void {
    this.isAuthenticating = true;

    this.authService.logout().then(() => this.navigationService.goTo('/login'));
  }

  toFormGroup() {
    return this.formBuilder.group({
      password: ['', [Validators.required, Validators.minLength(8)]]
    });
  }
}
